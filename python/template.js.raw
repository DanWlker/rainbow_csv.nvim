fs = require('fs')
readline = require('readline');
rbql_utils = require('__RBQLMP__rbql_home_dir/rbql_utils.js')

var csv_encoding = '__RBQLMP__csv_encoding';
var DLM = '__RBQLMP__dlm';
var join_table_path = __RBQLMP__rhs_table_path;
var top_count = __RBQLMP__top_count;


function smart_split(line) {
    if (DLM == ',') {
        return rbql_utils.split_escaped_csv_str(line);
    } else {
        return [line.split(DLM), false];
    }
}

function strip_cr(line) {
    if (line.charAt(line.length - 1) === '\r') {
        return line.substring(0, line.length - 1);
    }
    return line;
}


var lineReader = null;
var src_table_path = __RBQLMP__src_table_path;
if (src_table_path != null) {
    lineReader = readline.createInterface({ input: fs.createReadStream(src_table_path, {encoding: csv_encoding}) });
} else {
    process.stdin.setEncoding(csv_encoding);
    lineReader = readline.createInterface({ input: process.stdin });
}

var dst_stream = null;
var dst_table_path = __RBQLMP__dst_table_path;
if (dst_table_path != null) {
    dst_stream = fs.createWriteStream(dst_table_path, {defaultEncoding: csv_encoding});
} else {
    process.stdout.setDefaultEncoding(csv_encoding);
    dst_stream = process.stdout;
}


var NR = 0;

var join_fields_info = new Object();
var input_fields_info = new Object();
var output_fields_info = new Object();
var null_value_in_output = false;
var defective_csv_line_in_input = 0
var defective_csv_line_in_join = 0


function exit_with_error_msg(error_msg) {
    var report = new Object();
    report.error = error_msg
    process.stderr.write(JSON.stringify(report));
    process.exit(1);
}


function register_num_fields(line_num, line) {
    var num_fields = line.split('\t').length;
    if (!output_fields_info.hasOwnProperty(num_fields))
        output_fields_info[num_fields] = line_num;
}


function SimpleWriter(dst) {
    this.dst = dst;
    this.NW = 0;
    this.write = function(record) {
        this.dst.write(record);
        this.dst.write('\n');
        this.NW += 1;
        register_num_fields(this.NW, record);
    }
}

function UniqWriter(dst) {
    this.dst = dst;
    this.seen = new Set();
    this.NW = 0;
    this.write = function(record) {
        if (!this.seen.has(record)) {
            this.seen.add(record);
            this.dst.write(record);
            this.dst.write('\n');
            this.NW += 1;
            register_num_fields(this.NW, record);
        }
    }
}


function BadFieldError(idx) {
    this.idx = idx;
    this.name = 'BadFieldError';
}


function safe_get(record, idx) {
    if (idx < record.length) {
        return record[idx];
    }
    throw new BadFieldError(idx);
}


function read_join_table(table_path) {
    var fields_max_len = 0;
    var content = fs.readFileSync(table_path, {encoding: csv_encoding});
    var lines = content.split('\n');
    var result = new Map();
    for (var i = 0; i < lines.length; i++) {
        var line = strip_cr(lines[i]);
        if (i + 1 == lines.length && line.length == 0)
            break;
        var split_result = smart_split(line);
        var bfields = split_result[0];
        var warning = split_result[1];
        if (warning && !defective_csv_line_in_join)
            defective_csv_line_in_join = i + 1;
        var num_fields = bfields.length;
        if (!join_fields_info.hasOwnProperty(num_fields))
            join_fields_info[num_fields] = i + 1;
        fields_max_len = Math.max(fields_max_len, num_fields);
        var key = null;
        try {
            key = __RBQLMP__rhs_join_var;
        } catch (e) {
            if (e instanceof BadFieldError) {
                exit_with_error_msg('No "b' + (e.idx + 1) + '" column at line: ' + (i + 1) + ' in "B" table')
            }
        }
        if (result.has(key)) {
            exit_with_error_msg('Join column must be unique in right-hand-side "B" table. Found duplicate key: "' + key + '"')
        }
        result.set(key, bfields);
    }
    return [result, fields_max_len];
}

function null_join(join_map, max_join_fields, lhs_key) {
    return null;
}

function inner_join(join_map, max_join_fields, lhs_key) {
    return join_map.get(lhs_key);
}


function left_join(join_map, max_join_fields, lhs_key) {
    var result = join_map.get(lhs_key);
    if (result == null) {
        result = Array(max_join_fields).fill(null);
    }
    return result;
}


function strict_left_join(join_map, max_join_fields, lhs_key) {
    var result = join_map.get(lhs_key);
    if (result == null) {
        exit_with_error_msg('In "strict left join" mode all A table keys must be present in table B. Key "' + lhs_key + '" was not found');
    }
    return result;
}


function stable_compare(a, b) {
    for (var i = 0; i < a.length; i++) {
        if (a[i] !== b[i])
            return a[i] < b[i] ? -1 : 1;
    }
}


var join_map = null;
var max_join_fields = null;
if (join_table_path !== null) {
    var join_params = read_join_table(join_table_path);
    join_map = join_params[0];
    max_join_fields = join_params[1];
}


var writer = new __RBQLMP__writer_type(dst_stream);
var unsorted_entries = [];

lineReader.on('line', function (line) {
    NR += 1;
    //readline strips last '\r'
    var split_result = smart_split(line);
    var fields = split_result[0];
    var warning = split_result[1];
    if (warning && !defective_csv_line_in_input)
        defective_csv_line_in_input = NR;
    var NF = fields.length;
    if (!input_fields_info.hasOwnProperty(NF))
        input_fields_info[NF] = NR;
    var bfields = null;
    var star_line = fields.join('\t');
    if (join_map != null) {
        bfields = __RBQLMP__join_function(join_map, max_join_fields, __RBQLMP__lhs_join_var);
        if (bfields == null)
            return;
        star_line = fields.concat(bfields).join('\t')
    }
    if (!(__RBQLMP__where_expression))
        return;
    var out_fields = null;
    try {
        out_fields = [__RBQLMP__select_expression]
    } catch (e) {
        if (e instanceof BadFieldError) {
            exit_with_error_msg('No "a' + (e.idx + 1) + '" column at line: ' + NR);
        }
    }
    for (var i = 0; i < out_fields.length; i++) {
        if (out_fields[i] == null) {
            null_value_in_output = true;
        }
    }
    if (__RBQLMP__sort_flag) {
        var sort_entry = [__RBQLMP__sort_key_expression, NR, out_fields.join('\t')];
        unsorted_entries.push(sort_entry);
    } else {
        if (top_count != -1 && writer.NW >= top_count) {
            lineReader.close();
            return;
        }
        writer.write(out_fields.join('\t'));
    }

});


function generate_warnings() {
    var warnings = new Object();

    if (null_value_in_output)
        warnings['null_value_in_output'] = true;
    if (defective_csv_line_in_input)
        warnings['defective_csv_line_in_input'] = defective_csv_line_in_input;
    if (defective_csv_line_in_join)
        warnings['defective_csv_line_in_join'] = defective_csv_line_in_join;
    if (Object.keys(output_fields_info).length > 1)
        warnings['output_fields_info'] = output_fields_info;
    if (Object.keys(input_fields_info).length > 1)
        warnings['input_fields_info'] = input_fields_info;
    if (Object.keys(join_fields_info).length > 1)
        warnings['join_fields_info'] = join_fields_info;
    if (!Object.keys(warnings).length)
        return null;
    return JSON.stringify({'warnings': warnings});
}

lineReader.on('close', function () {
    if (unsorted_entries.length) {
        unsorted_entries.sort(stable_compare);
        if (__RBQLMP__reverse_flag)
            unsorted_entries.reverse();
        for (var i = 0; i < unsorted_entries.length; i++) {
            if (top_count != -1 && writer.NW >= top_count)
                break;
            writer.write(unsorted_entries[i][unsorted_entries[i].length - 1]);
        }
    }
    var warnings_report = generate_warnings();
    if (warnings_report)
        process.stderr.write(warnings_report);
});
